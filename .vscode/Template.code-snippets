{
	// Place your cpp_codes workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "",
		"prefix": "init",
		"body": [
			"#pragma GCC optimize(\"Ofast\")",
			"#pragma GCC target(\"avx,avx2,fma\")",
			"#pragma GCC optimization (\"unroll-loops\")",
			"#include <bits/stdc++.h>",
			"#include <ext/pb_ds/assoc_container.hpp>",
			"#include <ext/pb_ds/tree_policy.hpp>",
			"using namespace __gnu_pbds;",
			"using namespace std;",
			"#define endl \"\\n\" ",
			"#define debug(x) cerr << #x << \" = \" << x << endl;",
			"#define ll long long",
			"#define pii pair<int, int>",
			"#define vi vector<int>",
			"#define all(x) (x).begin(), (x).end()",
			"#define rall(x) (x).rbegin(), (x).rend()",
			"#define umap unordered_map",
			"#define uset unordered_set ",
			"#define mod 1000000007",
			"#define imax INT_MAX",
			"#define imin INT_MIN",
			"#define inf 1e9",
			"#define infl 1e18",
			"#define sz(x) ((int)x.size())",
			"#define int long long",
			"",
			"typedef tree<int, null_type, less_equal<int>, rb_tree_tag, ",
			"        tree_order_statistics_node_update>",
			"        pbds;",
			"",
			"void solve () {",
			"",
			"}",
			"",
			"int32_t main() {",
			"    ios_base::sync_with_stdio(false);",
			"    cin.tie(NULL);",
			"    ",
			"\tint t;",
			"\tt = 1;",
			"\tcin >> t;",
			"\twhile(t--) {",
			"\t\tsolve();",
			"\t}",
			"    return 0;",
			"}",
		],
		"description": "Default Template"
	}
}

void solve () {

}

int t; 
t = 1;
cin >> t;
while(t--) {
	solve();
}














